/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutUsersImport } from './routes/_layout/users'
import { Route as LayoutDevicesImport } from './routes/_layout/devices'
import { Route as LayoutUserIdImport } from './routes/_layout/user.$id'
import { Route as LayoutDeviceIdImport } from './routes/_layout/device.$id'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUsersRoute = LayoutUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDevicesRoute = LayoutDevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUserIdRoute = LayoutUserIdImport.update({
  id: '/user/$id',
  path: '/user/$id',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDeviceIdRoute = LayoutDeviceIdImport.update({
  id: '/device/$id',
  path: '/device/$id',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_layout/devices': {
      id: '/_layout/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof LayoutDevicesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/users': {
      id: '/_layout/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof LayoutUsersImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/device/$id': {
      id: '/_layout/device/$id'
      path: '/device/$id'
      fullPath: '/device/$id'
      preLoaderRoute: typeof LayoutDeviceIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/user/$id': {
      id: '/_layout/user/$id'
      path: '/user/$id'
      fullPath: '/user/$id'
      preLoaderRoute: typeof LayoutUserIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutDevicesRoute: typeof LayoutDevicesRoute
  LayoutUsersRoute: typeof LayoutUsersRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutDeviceIdRoute: typeof LayoutDeviceIdRoute
  LayoutUserIdRoute: typeof LayoutUserIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDevicesRoute: LayoutDevicesRoute,
  LayoutUsersRoute: LayoutUsersRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutDeviceIdRoute: LayoutDeviceIdRoute,
  LayoutUserIdRoute: LayoutUserIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/signin': typeof SigninRoute
  '/devices': typeof LayoutDevicesRoute
  '/users': typeof LayoutUsersRoute
  '/': typeof LayoutIndexRoute
  '/device/$id': typeof LayoutDeviceIdRoute
  '/user/$id': typeof LayoutUserIdRoute
}

export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/devices': typeof LayoutDevicesRoute
  '/users': typeof LayoutUsersRoute
  '/': typeof LayoutIndexRoute
  '/device/$id': typeof LayoutDeviceIdRoute
  '/user/$id': typeof LayoutUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/signin': typeof SigninRoute
  '/_layout/devices': typeof LayoutDevicesRoute
  '/_layout/users': typeof LayoutUsersRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/device/$id': typeof LayoutDeviceIdRoute
  '/_layout/user/$id': typeof LayoutUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/signin'
    | '/devices'
    | '/users'
    | '/'
    | '/device/$id'
    | '/user/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/signin' | '/devices' | '/users' | '/' | '/device/$id' | '/user/$id'
  id:
    | '__root__'
    | '/_layout'
    | '/signin'
    | '/_layout/devices'
    | '/_layout/users'
    | '/_layout/'
    | '/_layout/device/$id'
    | '/_layout/user/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/signin"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/devices",
        "/_layout/users",
        "/_layout/",
        "/_layout/device/$id",
        "/_layout/user/$id"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_layout/devices": {
      "filePath": "_layout/devices.tsx",
      "parent": "/_layout"
    },
    "/_layout/users": {
      "filePath": "_layout/users.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/device/$id": {
      "filePath": "_layout/device.$id.tsx",
      "parent": "/_layout"
    },
    "/_layout/user/$id": {
      "filePath": "_layout/user.$id.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
