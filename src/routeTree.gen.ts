/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutProfileImport } from './routes/_layout/profile'
import { Route as LayoutMeasuresImport } from './routes/_layout/measures'
import { Route as LayoutGeolocationImport } from './routes/_layout/geolocation'
import { Route as LayoutDevicesImport } from './routes/_layout/devices'
import { Route as LayoutCameraImport } from './routes/_layout/camera'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProfileRoute = LayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutMeasuresRoute = LayoutMeasuresImport.update({
  id: '/measures',
  path: '/measures',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutGeolocationRoute = LayoutGeolocationImport.update({
  id: '/geolocation',
  path: '/geolocation',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDevicesRoute = LayoutDevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCameraRoute = LayoutCameraImport.update({
  id: '/camera',
  path: '/camera',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_layout/camera': {
      id: '/_layout/camera'
      path: '/camera'
      fullPath: '/camera'
      preLoaderRoute: typeof LayoutCameraImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/devices': {
      id: '/_layout/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof LayoutDevicesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/geolocation': {
      id: '/_layout/geolocation'
      path: '/geolocation'
      fullPath: '/geolocation'
      preLoaderRoute: typeof LayoutGeolocationImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/measures': {
      id: '/_layout/measures'
      path: '/measures'
      fullPath: '/measures'
      preLoaderRoute: typeof LayoutMeasuresImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutCameraRoute: typeof LayoutCameraRoute
  LayoutDevicesRoute: typeof LayoutDevicesRoute
  LayoutGeolocationRoute: typeof LayoutGeolocationRoute
  LayoutMeasuresRoute: typeof LayoutMeasuresRoute
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutCameraRoute: LayoutCameraRoute,
  LayoutDevicesRoute: LayoutDevicesRoute,
  LayoutGeolocationRoute: LayoutGeolocationRoute,
  LayoutMeasuresRoute: LayoutMeasuresRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/signin': typeof SigninRoute
  '/camera': typeof LayoutCameraRoute
  '/devices': typeof LayoutDevicesRoute
  '/geolocation': typeof LayoutGeolocationRoute
  '/measures': typeof LayoutMeasuresRoute
  '/profile': typeof LayoutProfileRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/camera': typeof LayoutCameraRoute
  '/devices': typeof LayoutDevicesRoute
  '/geolocation': typeof LayoutGeolocationRoute
  '/measures': typeof LayoutMeasuresRoute
  '/profile': typeof LayoutProfileRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/signin': typeof SigninRoute
  '/_layout/camera': typeof LayoutCameraRoute
  '/_layout/devices': typeof LayoutDevicesRoute
  '/_layout/geolocation': typeof LayoutGeolocationRoute
  '/_layout/measures': typeof LayoutMeasuresRoute
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/signin'
    | '/camera'
    | '/devices'
    | '/geolocation'
    | '/measures'
    | '/profile'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/camera'
    | '/devices'
    | '/geolocation'
    | '/measures'
    | '/profile'
    | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/signin'
    | '/_layout/camera'
    | '/_layout/devices'
    | '/_layout/geolocation'
    | '/_layout/measures'
    | '/_layout/profile'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/signin"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/camera",
        "/_layout/devices",
        "/_layout/geolocation",
        "/_layout/measures",
        "/_layout/profile",
        "/_layout/"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_layout/camera": {
      "filePath": "_layout/camera.tsx",
      "parent": "/_layout"
    },
    "/_layout/devices": {
      "filePath": "_layout/devices.tsx",
      "parent": "/_layout"
    },
    "/_layout/geolocation": {
      "filePath": "_layout/geolocation.tsx",
      "parent": "/_layout"
    },
    "/_layout/measures": {
      "filePath": "_layout/measures.tsx",
      "parent": "/_layout"
    },
    "/_layout/profile": {
      "filePath": "_layout/profile.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
